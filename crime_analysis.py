# -*- coding: utf-8 -*-
"""Copy of Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u-5F9NBTA95mz3ZQobHHbujIaziX73af
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_rel
from scipy.stats import norm
from sklearn.linear_model import LinearRegression

"""IMPORTING CSV"""

df=pd.read_csv(r'/content/data/VICTIMS.csv')

df.head(10)

df.tail(10)

df.rename(columns={
    'STATE/UT': 'State_UT',
    'YEAR': 'Year',
    'Pupose': 'Purpose',
    'Total No. of cases reported': 'Total_Cases_Reported',
    'Male upto 10 years': 'Male_Upto_10',
    'Female upto 10 years': 'Female_Upto_10',
    'Male 10-15 years': 'Male_10_15',
    'Female 10-15 years': 'Female_10_15',
    'Male 15-18 years': 'Male_15_18',
    'Female 15-18 years': 'Female_15_18',
    'Male 18-30 years': 'Male_18_30',
    'Female 18-30 years': 'Female_18_30',
    'Male 30-50 years': 'Male_30_50',
    'Female 30-50 years': 'Female_30_50',
    'Male above 50 years': 'Male_Above_50',
    'Female above 50 years': 'Female_Above_50',
    'Total Male': 'Total_Male',
    'Total Female': 'Total_Female',
    'Grand Total': 'Grand_Total'
}, inplace=True)

df.head()

df.tail()

df.shape

df.info()

df.isnull().sum()

df.describe()

# Group by purpose and sum the total victims
purpose_totals = df.groupby('Purpose')['Grand_Total'].sum().sort_values(ascending=False)

# Display the actual totals
print(purpose_totals)

"""**EDA AND VISUALISATION**"""

sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (12, 6)

"""**Total Victims by Year**"""

yearly_victims = df.groupby('Year')['Grand_Total'].sum()
sns.lineplot(x=yearly_victims.index, y=yearly_victims.values, marker='o')
plt.title('Total Victims Reported Each Year')
plt.xlabel('Year')
plt.ylabel('Number of Victims')
plt.show()

"""**Top 10 States/UTs by Total Victims**"""

top_states = df.groupby('State_UT')['Grand_Total'].sum().sort_values(ascending=False).head(10)
sns.barplot(x=top_states.values, y=top_states.index, palette='viridis')
plt.title('Top 10 States/UTs by Total Victims')
plt.xlabel('Number of Victims')
plt.ylabel('State/UT')
plt.show()

"""**Victims by Purpose**"""

purpose_counts = df.groupby('Purpose')['Grand_Total'].sum().sort_values(ascending=False)
purpose_counts=purpose_counts.drop('Total')
sns.barplot(x=purpose_counts.values, y=purpose_counts.index, palette='coolwarm')
plt.title('Victims by Purpose')
plt.xlabel('Total Victims')
plt.ylabel('Purpose')
plt.show()

"""**Gender-wise Distribution**"""

gender_totals = df[['Total_Male', 'Total_Female']].sum()
plt.pie(gender_totals, labels=gender_totals.index, autopct='%1.1f%%', startangle=140, colors=['skyblue', 'pink'])
plt.title('Gender Distribution of Victims')
plt.axis('equal')
plt.show()

"""**Correlation Heatmap**"""

sns.heatmap(df.select_dtypes(include='number').corr(), annot=True, cmap='YlGnBu')
plt.title('Correlation Heatmap')
plt.show()

"""**Gender by Year**"""

gender_by_year = df.groupby('Year')[['Total_Male', 'Total_Female']].sum()
gender_by_year.plot(kind='bar', colormap='Paired')
plt.title('Gender-wise Distribution of Victims by Year')
plt.xlabel('Year')
plt.ylabel('Number of Victims')
plt.show()

"""**Victims by Age and Gender**"""

age_groups = [
    'Male_Upto_10', 'Female_Upto_10',
    'Male_10_15', 'Female_10_15',
    'Male_15_18', 'Female_15_18',
    'Male_18_30', 'Female_18_30',
    'Male_30_50', 'Female_30_50',
    'Male_Above_50', 'Female_Above_50'
]
age_totals = df[age_groups].sum().sort_values(ascending=False)
sns.barplot(x=age_totals.values, y=age_totals.index, palette='cubehelix')
plt.title('Total Victims by Age and Gender')
plt.xlabel('Victim Count')
plt.ylabel('Age & Gender Group')
plt.show()

"""**Top 5 Purposes by Gender**"""

top_5_purposes = df.groupby('Purpose')[['Total_Male', 'Total_Female','Grand_Total']].sum().sort_values(by='Grand_Total', ascending=False).head(6)
top_5_purposes=top_5_purposes.drop('Total')
top_5_purposes.plot(kind='bar',color=['darkviolet','violet','indigo'])
plt.title('Top 5 Purposes: Male vs Female Victims')
plt.xlabel('Purpose')
plt.ylabel('Number of Victims')
plt.show()

"""**Yearly Trend in a Specific State**"""

print(df['State_UT'].unique())

if 'Punjab' in df['State_UT'].unique():
    maha_data = df[df['State_UT'] == 'Punjab']
    maha_trend = maha_data.groupby('Year')['Grand_Total'].sum()

    sns.lineplot(x=maha_trend.index, y=maha_trend.values, marker='o', color='crimson')
    plt.title('Victim Trend in Punjab Over Years')
    plt.xlabel('Year')
    plt.ylabel('Number of Victims')
    plt.tight_layout()
    plt.show()
else:
    print("Punjab not found in dataset.")

"""**Boxplot of Victims by Purpose**"""

plt.figure(figsize=(14, 6))
ak=df
ak=df[df['Purpose']!='Total']
sns.boxplot(x='Purpose', y='Grand_Total', data=ak)
plt.xticks(rotation=90)
plt.title('Boxplot: Victim Count by Purpose')
plt.tight_layout()
plt.show()

"""**Prediction + Labeled Plot for 2024 & 2025**"""

# Group total victims by year
trend = df.groupby('Year')['Grand_Total'].sum().reset_index()

# Prepare the data
X = trend['Year'].values.reshape(-1, 1)
y = trend['Grand_Total'].values

# Train the model
model = LinearRegression()
model.fit(X, y)

# Predict for 2024 and 2025
future_years = np.array([[2024], [2025]])
predicted = model.predict(future_years)

# Print predictions
for year, value in zip(future_years.flatten(), predicted):
    print(f"Predicted victims in {year}: {int(value)}")

# Plot actual data
plt.plot(trend['Year'], y, marker='o', label='Actual')

# Plot predictions
plt.plot(future_years, predicted, marker='x', linestyle='--', color='red', label='Predicted')

# Add value labels to predicted points
for year, value in zip(future_years.flatten(), predicted):
    plt.text(year, value + 1000, f'{int(value)}', ha='center', fontsize=9, color='red')

# Labels and title
plt.xlabel('Year')
plt.ylabel('Number of Victims')
plt.title('Victim Trend with Predictions for 2024 & 2025')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Paired T-test (Male vs. Female Victims)**"""

# Perform paired T-test
t_stat, p_value = ttest_rel(df['Total_Male'], df['Total_Female'])

print("Paired T-test Results:")
print(f"T-statistic: {t_stat:.4f}")
print(f"P-value: {p_value:.4f}")

if p_value < 0.05:
    print("Significant difference between male and female victims.")
else:
    print("No significant difference between male and female victims.")

"""**Male victims in 2001 vs. 2002**"""

# Now extract cleanly
male_2001 = df[df['Year'] == 2001]['Total_Male'].dropna()
male_2002 = df[df['Year'] == 2002]['Total_Male'].dropna()

# Calculate statistics
mean1, mean2 = male_2001.mean(), male_2002.mean()
std1, std2 = male_2001.std(), male_2002.std()
n1, n2 = len(male_2001), len(male_2002)

# Z-test
se = np.sqrt((std1**2)/n1 + (std2**2)/n2)
z = (mean1 - mean2) / se
p = 2 * (1 - norm.cdf(abs(z)))

# Output results
print("Z-Statistic:", round(z, 3))
print("P-Value:", round(p, 4))

alpha = 0.05
print("\nConclusion:")
if p < alpha:
    print("The difference in male victims between 2001 and 2002 is statistically significant.")
else:
    print("There is no statistically significant difference in male victims between 2001 and 2002.")

